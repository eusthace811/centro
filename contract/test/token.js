const BigNumber = require('bignumber.js')

contract('CentroCoin', (accounts) => {
  // it('Credits msg.sender with the total amount of CEN', async () => {
  //   let { token } = await utils.deployToken()
  //   let tokenBalance = await token.balanceOf.call(accounts[0])
  //   let totalSupply = await token.totalSupply.call()
  //   assert.equal(totalSupply.toNumber(), tokenBalance.toNumber())
  // })

  it('Transfers tokens correctly', async () => {
    let { token } = await utils.deployToken()
    let tokenBalanceSenderBefore = await token.balanceOf.call(accounts[0])
    let tokenBalanceReceiverBefore = await token.balanceOf.call(accounts[1])
    let totalSupplyBefore = await token.totalSupply.call()
    let tokensToSend = new BigNumber(1e10)
    await token.transfer(accounts[1], tokensToSend, { from: accounts[0] })
    let tokenBalanceSenderAfter = await token.balanceOf.call(accounts[0])
    let tokenBalanceReceiverAfter = await token.balanceOf.call(accounts[1])
    let totalSupplyAfter = await token.totalSupply.call()
    assert.isOk(tokenBalanceReceiverAfter.eq(tokenBalanceReceiverBefore.add(tokensToSend)))
    assert.isOk(tokenBalanceSenderAfter.eq(tokenBalanceSenderBefore.sub(tokensToSend)))
    assert.isOk(totalSupplyAfter.eq(totalSupplyBefore))
  })

  it('Does not allow transferral of more than an account\'s balance', async () => {
    let { token } = await utils.deployToken()
    let tokenBalanceSenderBefore = await token.balanceOf.call(accounts[0])
    let tokenBalanceReceiverBefore = await token.balanceOf.call(accounts[1])
    let totalSupplyBefore = await token.totalSupply.call()
    let tokensToSend = tokenBalanceSenderBefore.add(10)
    await token.transfer(accounts[1], tokensToSend, { from: accounts[0] })
    let tokenBalanceSenderAfter = await token.balanceOf.call(accounts[0])
    let tokenBalanceReceiverAfter = await token.balanceOf.call(accounts[1])
    let totalSupplyAfter = await token.totalSupply.call()
    assert.isOk(tokenBalanceReceiverAfter.eq(tokenBalanceReceiverBefore))
    assert.isOk(tokenBalanceSenderAfter.eq(tokenBalanceSenderBefore))
    assert.isOk(totalSupplyAfter.eq(totalSupplyBefore))
  })

  it('Allows approving others to move tokens', async () => {
    let { token } = await utils.deployToken()
    let tokenBalanceApproverBefore = await token.balanceOf.call(accounts[0])
    let tokenBalanceApproveeBefore = await token.balanceOf.call(accounts[1])
    let tokenBalanceReceiverBefore = await token.balanceOf.call(accounts[2])
    let totalSupplyBefore = await token.totalSupply.call()
    let tokensToSend = new BigNumber(1e10)
    await token.approve(accounts[1], 1e10, { from: accounts[0] })
    let approvedBalance = await token.allowance.call(accounts[0], accounts[1])
    assert.isOk(approvedBalance.eq(tokensToSend))
    await token.transferFrom(accounts[0], accounts[2], tokensToSend, { from: accounts[1] })
    let tokenBalanceApproverAfter = await token.balanceOf.call(accounts[0])
    let tokenBalanceApproveeAfter = await token.balanceOf.call(accounts[1])
    let tokenBalanceReceiverAfter = await token.balanceOf.call(accounts[2])
    let totalSupplyAfter = await token.totalSupply.call()
    assert.isOk(tokenBalanceApproverAfter.eq(tokenBalanceApproverBefore.sub(tokensToSend)))
    assert.isOk(tokenBalanceApproveeBefore.eq(new BigNumber(0)))
    assert.isOk(tokenBalanceApproveeAfter.eq(tokenBalanceApproveeBefore))
    assert.isOk(tokenBalanceReceiverAfter.eq(tokensToSend))
    assert.isOk(tokenBalanceReceiverBefore.eq(tokenBalanceReceiverAfter.sub(tokensToSend)))
    assert.isOk(totalSupplyAfter.eq(totalSupplyBefore))
  })

  it('Does not allow approvee to transfer more tokens than have been approved', async () => {
    let { token } = await utils.deployToken()
    let tokenBalanceApproverBefore = await token.balanceOf.call(accounts[0])
    let tokenBalanceApproveeBefore = await token.balanceOf.call(accounts[1])
    let tokenBalanceReceiverBefore = await token.balanceOf.call(accounts[2])
    let totalSupplyBefore = await token.totalSupply.call()
    let tokensToApprove = new BigNumber(1e10)
    await token.approve(accounts[1], 1e10, { from: accounts[0] })
    let approvedBalance = await token.allowance.call(accounts[0], accounts[1])
    assert.isOk(approvedBalance.eq(tokensToApprove))
    let tokensToAttemptToTransfer = tokensToApprove.add(new BigNumber(10))
    await token.transferFrom(accounts[0], accounts[2], tokensToAttemptToTransfer, { from: accounts[1] })
    let tokenBalanceApproverAfter = await token.balanceOf.call(accounts[0])
    let tokenBalanceApproveeAfter = await token.balanceOf.call(accounts[1])
    let tokenBalanceReceiverAfter = await token.balanceOf.call(accounts[2])
    let totalSupplyAfter = await token.totalSupply.call()
    assert.isOk(tokenBalanceApproverAfter.eq(tokenBalanceApproverBefore))
    assert.isOk(tokenBalanceApproveeBefore.eq(new BigNumber(0)))
    assert.isOk(tokenBalanceApproveeAfter.eq(tokenBalanceApproveeBefore))
    assert.isOk(tokenBalanceReceiverAfter.eq(tokenBalanceReceiverBefore))
    assert.isOk(totalSupplyAfter.eq(totalSupplyBefore))
  })
})
